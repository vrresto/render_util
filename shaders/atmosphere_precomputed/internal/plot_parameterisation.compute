// based on http://antongerdelan.net/opengl/compute.html

#version 430

#include definitions.glsl
#include constants.glsl


layout(local_size_x = 1, local_size_y = 1) in;
// layout(local_size_x = 32, local_size_y = 32) in;
layout(rgba32f, binding = 0) uniform image2D img_output;


uniform ivec2 texture_size;


void main(void)
{

  for (int y = 0; y < texture_size.y; y++)
  {
    imageStore(img_output, ivec2(gl_GlobalInvocationID.x, y), vec4(0,0,0,1));
  }
  
  
  float x = float(gl_GlobalInvocationID.x) / float(texture_size.x);
  
  float r = ATMOSPHERE.bottom_radius + 100;
  float mu = 2 * x - 1;
  float mu_s = 0;
  float nu = 0;
  bool ray_r_mu_intersects_ground = RayIntersectsGround(ATMOSPHERE, r, mu);
  

  vec4 uvwz = GetScatteringTextureUvwzFromRMuMuSNu(ATMOSPHERE, r, mu, mu_s, nu,
                                                   ray_r_mu_intersects_ground);


  vec4 y_coords = (1 - clamp(uvwz, vec4(0), vec4(1))) * texture_size.y;
  
//   y_coords = vec3(100, 200, 300);

  imageStore(img_output, ivec2(gl_GlobalInvocationID.x, y_coords.x), vec4(1,0,0,1));
  imageStore(img_output, ivec2(gl_GlobalInvocationID.x, y_coords.y), vec4(0,1,0,1));
  imageStore(img_output, ivec2(gl_GlobalInvocationID.x, y_coords.z), vec4(0,0,1,1));
  imageStore(img_output, ivec2(gl_GlobalInvocationID.x, y_coords.w), vec4(0,1,1,1));

//   imageStore(img_output, ivec2(gl_GlobalInvocationID.x, 100), vec4(100));
}
